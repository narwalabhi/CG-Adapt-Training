*******************MongoDB Assignments-1*************************
									Inserting Documents

1-db.movies.insertMany([
{title : "Fight Club" , writer : "Chuck Palahniuko" , year : 1999 , actors : ["Brad Pitt","Edward Norton"]},
{title : "Pulp Fiction" , writer : "Quentin Tarantino" , year : 1999 , actors : ["John Travolta","Uma Thurman"]},
{title : "Inglorious Basterds" , writer : "Quentin Tarantino" , year : 2009 , actors : ["Brad Pitt","Diane Kruger","Eli Roth"]},
{title : "The Hobbit-An Unexpected Journey" , writer : "J.R.R. Tolkein" , year : 2012 , franchise : "The Hobbit"},
{title : "The Hobbit-The Desolation of Smaug" , writer : "J.R.R. Tolkein" , year : 2013 , franchise : "The Hobbit"},
{title : "The Hobbit-The Battle of the Five Armies" , writer : "J.R.R. Tolkein" , year : 2012 , franchise : "The Hobbit" , synopsis : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness."},
{title : "Pee Wee Hermans Big Adventure"},
{title : "Avatar"}
])


									Query / Find Documents

1-db.movies.find().pretty()
2-db.movies.find({writer: "Quentin Tarantino"}).pretty()
3-db.movies.find({actors: "Brad Pitt"}).pretty()
4-db.movies.find({franchise: "The Hobbit"}).pretty()
5- db.movies.find({ $and:[ {year:{$gte:1990}}, {year:{$lt:2000}} ] }).pretty()
6-db.movies.find({$or:[{year:{$lt:2000}},{year:{$gt:2010}}]})

									Update Documents

1-db.movies.updateOne({title:"The Hobbit: An Unexpected Journey"},{$set:{synopsis:"A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."}})
2-db.movies.updateOne({title:"The Hobbit: The Desolation of Smaug"},{$set:{synopsis:"The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."}})
3-db.movies.updateOne({title:"Pulp Fiction"},{$addToSet:{actors:"Samuel L. Jackson"}})


									Text Search

db.movies.createIndex({synopsis:"text"})

1-db.movies.find({$text:{$search:"Bilbo"}}).pretty()
2-db.movies.find({$text:{$search:"Gandalf"}}).pretty()
3-db.movies.find({$and:[{synopsis:{$regex:"Bilbo"}}, {synopsis:{$not:/Gandalf/}}]}).pretty()
4-db.movies.find({$or:[{synopsis:{$regex:"dwarves"}}, {synopsis:{$regex:"hobbit"}}]}).pretty()
5-db.movies.find({$and:[{synopsis:{$regex:"gold"}}, {synopsis:{$regex:"dragon"}}]}).pretty()

									Delete Documents

1-db.movies.remove({title:"Pee Wee Herman's Big Adventure"})
2-db.movies.remove({title:"Avatar"})

  									Relationships
									
1-db.users.insertMany([
{username : "GoodGuyGreg" , first_name : "Good Guy" , last_name : "Greg" }, 
{username : "ScumbagSteve" , full_name : { first : "Scumbag" , last : "Steve"} }
])
2-db.posts.insertMany([
{username : "GoodGuyGreg" , title : "Passes out at party" , body : "Wakes up early and cleans house"},
{username : "GoodGuyGreg" , title : "Steals your identity" , body : "Raises your credit score"},
{username : "GoodGuyGreg" , title : "Reports a bug in your code" , body : "Sends you a Pull Request"},
{username : "ScumbagSteve" , title : "Borrows something" , body : "Sells it"},
{username : "ScumbagSteve" , title : "Borrows everything" , body : "The end"},
{username : "ScumbagSteve" , title : "Forks your repo on github" , body : "Sets to private"}
])
3-db.comments.insertMany([
{username : "GoodGuyGreg" , comment : "Hope you got a good deal!" , post : ["600bc0373d841700607c3e1d"]},
{username : "GoodGuyGreg" , comment : "What's mine is yours!" , post : ["600bc0373d841700607c3e1e"]},
{username : "GoodGuyGreg" , comment : "Don't violate the licensing agreement!" , post : ["600bc0373d841700607c3e1f"]},
{username : "ScumbagSteve" , comment : "It still isn't clean" , post : ["600bc0373d841700607c3e1a"]},
{username : "ScumbagSteve" , comment : "Denied your PR cause I found a hack" , post : ["600bc0373d841700607c3e1c"]}
])
									Querying related collections

1- db.users.find().pretty()
2-db.posts.find().pretty()
3-db.posts.find({username:"GoodGuyGreg"}).pretty()
4-db.posts.find({username:"ScumbagSteve"}).pretty()
5-db.comments.find().pretty()
6-db.comments.find({username:"GoodGuyGreg"}).pretty()
7-db.comments.find({username:"ScumbagSteve"}).pretty()
8-db.comments.find({post:{$regex:"Reports a bug in your code"}})







